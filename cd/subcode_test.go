package cd_test

import (
	"testing"

	"dreamdump/cd"
	"dreamdump/scsi"

	"gotest.tools/v3/assert"
)

func TestSubcodeLocationLBA0000(t *testing.T) {
	sector := cd.Sector{}
	sector.Sub.Qchannel = [12]uint8{
		0x41, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x02, 0x00, 0x28, 0x32,
	}

	assert.Equal(t, sector.Sub.Qchannel.LBA(), int32(0x000000))
}

func TestSubcodeLocationLBAFFFF(t *testing.T) {
	sector := cd.Sector{}
	sector.Sub.Qchannel = [12]uint8{
		0x41, 0x01, 0x01, 0x14, 0x33, 0x60, 0x00, 0x14,
		0x35, 0x60, 0x49, 0x38,
	}

	assert.Equal(t, sector.Sub.Qchannel.LBA(), int32(0xFFFF))
}

func TestSubcodeTrackNumber(t *testing.T) {
	sector := cd.Sector{}
	sector.Sub.Qchannel = [12]uint8{
		0x41, 0x01, 0x01, 0x14, 0x33, 0x60, 0x00, 0x14,
		0x35, 0x60, 0x49, 0x38,
	}

	assert.Equal(t, sector.Sub.Qchannel.TrackNumber(), uint8(1))
}

func TestSubcodeIndexNumber(t *testing.T) {
	sector := cd.Sector{}
	sector.Sub.Qchannel = [12]uint8{
		0x41, 0x01, 0x01, 0x14, 0x33, 0x60, 0x00, 0x14,
		0x35, 0x60, 0x49, 0x38,
	}

	assert.Equal(t, sector.Sub.Qchannel.IndexNumber(), uint8(1))
}

func TestSubcodeTrackTypeData(t *testing.T) {
	sector := cd.Sector{}
	sector.Sub.Qchannel = [12]uint8{
		0x41, 0x01, 0x01, 0x14, 0x33, 0x60, 0x00, 0x14,
		0x35, 0x60, 0x49, 0x38,
	}

	assert.Equal(t, sector.Sub.Qchannel.TrackType(), cd.TRACK_TYPE_DATA)
}

func TestSubcodeTrackTypeAudio(t *testing.T) {
	sector := cd.Sector{}
	sector.Sub.Qchannel = [12]uint8{
		0x01, 0x01, 0x01, 0x14, 0x33, 0x60, 0x00, 0x14,
		0x35, 0x60, 0x49, 0x38,
	}

	assert.Equal(t, sector.Sub.Qchannel.TrackType(), cd.TRACK_TYPE_AUDIO)
}

func TestSubcodeParse(t *testing.T) {
	sector := cd.Sector{}
	subchannel := [scsi.SECTOR_SUB_SIZE]uint8{
		0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00,
		0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x40, 0x40, 0x00,
	}
	sector.Sub.Parse(subchannel)

	assert.Equal(t, sector.Sub.Qchannel.TrackType(), cd.TRACK_TYPE_DATA)
	assert.Equal(t, sector.Sub.Qchannel.LBA(), int32(0x0000b2e4))
	assert.Equal(t, sector.Sub.Qchannel.CheckParity(), true)
}
